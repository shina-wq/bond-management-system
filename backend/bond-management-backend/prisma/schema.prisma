generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model audit_logs {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  table_name   String    @db.VarChar(100)
  record_id    String    @db.Uuid
  action       String    @db.VarChar(20)
  old_values   Json?
  new_values   Json?
  performed_by String    @db.Uuid
  performed_at DateTime? @default(now()) @db.Timestamptz(6)
  users        users     @relation(fields: [performed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([performed_at], map: "idx_audit_logs_performed_at")
  @@index([table_name, record_id], map: "idx_audit_logs_table_record")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bond_agreements {
  id                                               String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  employee_id                                      String                @db.Uuid
  training_provider_id                             String                @db.Uuid
  training_name                                    String                @db.VarChar(255)
  training_description                             String?
  training_cost                                    Decimal               @db.Decimal(15, 2)
  training_start_date                              DateTime              @db.Date
  training_end_date                                DateTime              @db.Date
  bond_duration_months                             Int
  bond_start_date                                  DateTime              @db.Date
  bond_end_date                                    DateTime?             @default(dbgenerated("(bond_start_date + make_interval(months => bond_duration_months))")) @db.Date
  document_path                                    String?               @db.VarChar(500)
  document_hash                                    String?               @db.VarChar(64)
  status                                           String?               @default("ACTIVE") @db.VarChar(20)
  created_by                                       String                @db.Uuid
  created_at                                       DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at                                       DateTime?             @default(now()) @db.Timestamptz(6)
  department_id                                    String?               @db.Uuid
  employees_bond_agreements_created_byToemployees  employees             @relation("bond_agreements_created_byToemployees", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employees_bond_agreements_employee_idToemployees employees             @relation("bond_agreements_employee_idToemployees", fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  training_providers                               training_providers    @relation(fields: [training_provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departments                                      departments?          @relation(fields: [department_id], references: [id], onUpdate: NoAction, map: "fk_bond_agreements_department")
  bond_status_history                              bond_status_history[]
  notifications                                    notifications[]

  @@index([department_id], map: "idx_bond_agreements_department_id")
  @@index([employee_id], map: "idx_bond_agreements_employee")
  @@index([bond_end_date], map: "idx_bond_agreements_end_date")
  @@index([status], map: "idx_bond_agreements_status")
  @@index([training_provider_id], map: "idx_bond_agreements_training_provider")
}

model bond_status_history {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bond_id         String          @db.Uuid
  old_status      String?         @db.VarChar(20)
  new_status      String          @db.VarChar(20)
  changed_by      String          @db.Uuid
  change_reason   String?
  created_at      DateTime?       @default(now()) @db.Timestamptz(6)
  bond_agreements bond_agreements @relation(fields: [bond_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employees       employees       @relation(fields: [changed_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model departments {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @unique @db.VarChar(100)
  is_active       Boolean?          @default(true)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  bond_agreements bond_agreements[]
  employees       employees[]

  @@index([is_active], map: "idx_departments_is_active")
  @@index([name], map: "idx_departments_name")
}

model employees {
  id                                                     String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  employee_id                                            String                @unique @db.VarChar(20)
  first_name                                             String                @db.VarChar(100)
  last_name                                              String                @db.VarChar(100)
  email                                                  String                @unique @db.VarChar(255)
  phone_number                                           String?               @unique @db.VarChar(20)
  position                                               String                @db.VarChar(100)
  hire_date                                              DateTime              @db.Date
  supervisor_id                                          String?               @db.Uuid
  created_at                                             DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at                                             DateTime?             @default(now()) @db.Timestamptz(6)
  is_active                                              Boolean?              @default(true)
  department_id                                          String?               @db.Uuid
  bond_agreements_bond_agreements_created_byToemployees  bond_agreements[]     @relation("bond_agreements_created_byToemployees")
  bond_agreements_bond_agreements_employee_idToemployees bond_agreements[]     @relation("bond_agreements_employee_idToemployees")
  bond_status_history                                    bond_status_history[]
  employees                                              employees?            @relation("employeesToemployees", fields: [supervisor_id], references: [id], onUpdate: NoAction)
  other_employees                                        employees[]           @relation("employeesToemployees")
  departments                                            departments?          @relation(fields: [department_id], references: [id], onUpdate: NoAction, map: "fk_employees_department")
  notifications                                          notifications[]
  users                                                  users?

  @@index([department_id], map: "idx_employees_department_id")
  @@index([email], map: "idx_employees_email")
  @@index([supervisor_id], map: "idx_employees_supervisor")
}

model notification_rules {
  id                String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String          @unique @db.VarChar(100)
  description       String?
  days_before_event Int
  template_subject  String          @db.VarChar(255)
  template_body     String
  is_active         Boolean?        @default(true)
  created_at        DateTime?       @default(now()) @db.Timestamptz(6)
  notifications     notifications[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model notifications {
  id                 String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bond_id            String             @db.Uuid
  rule_id            String             @db.Uuid
  recipient_id       String             @db.Uuid
  subject            String             @db.VarChar(255)
  body               String
  sent_at            DateTime?          @default(now()) @db.Timestamptz(6)
  status             String?            @default("PENDING") @db.VarChar(20)
  retry_count        Int?               @default(0)
  bond_agreements    bond_agreements    @relation(fields: [bond_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  employees          employees          @relation(fields: [recipient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notification_rules notification_rules @relation(fields: [rule_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([bond_id], map: "idx_notifications_bond_id")
  @@index([sent_at], map: "idx_notifications_sent_at")
  @@index([status], map: "idx_notifications_status")
}

model training_providers {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @db.VarChar(255)
  contact_email   String?           @db.VarChar(255)
  contact_phone   String?           @db.VarChar(50)
  address         String?
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  bond_agreements bond_agreements[]
  trainings       trainings[]
}

model trainings {
  id                       String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  providers_id             String             @db.Uuid
  training_name            String             @db.VarChar(200)
  training_description     String?
  training_duration_months Int?
  training_cost            Decimal?           @db.Decimal(15, 2)
  location                 String?            @db.VarChar(150)
  created_at               DateTime?          @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?          @default(now()) @db.Timestamptz(6)
  training_providers       training_providers @relation(fields: [providers_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user_roles {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @unique @db.VarChar(50)
  description String?
  permissions Json      @default("{}")
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  users       users[]
}

model users {
  id            String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  employee_id   String       @unique @db.Uuid
  username      String       @unique @db.VarChar(100)
  password_hash String       @db.VarChar(255)
  role_id       String       @db.Uuid
  is_active     Boolean?     @default(true)
  last_login    DateTime?    @db.Timestamptz(6)
  created_at    DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?    @default(now()) @db.Timestamptz(6)
  audit_logs    audit_logs[]
  employees     employees    @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_roles    user_roles   @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([employee_id], map: "idx_users_employee")
  @@index([role_id], map: "idx_users_role")
}

model refresh_tokens {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  token        String   @unique @db.VarChar(500)
  user_id      String   @db.Uuid
  expires_at   DateTime @db.Timestamptz(6)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  users        users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "idx_refresh_tokens_user_id")
  @@index([expires_at], map: "idx_refresh_tokens_expires_at")
}
