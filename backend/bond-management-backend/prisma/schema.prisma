generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========== ENUMS ==========
enum BondStatus {
  ACTIVE
  COMPLETED
  BREACHED
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

// ========== MODELS ==========
model employees {
  id            String    @id @default(uuid())
  employee_id   String    @unique
  first_name    String
  last_name     String
  email         String    @unique
  department    String
  position      String
  hire_date     DateTime
  supervisor_id String?
  is_active     Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  supervisor    employees?           @relation("EmployeeSupervisor", fields: [supervisor_id], references: [id])
  subordinates  employees[]          @relation("EmployeeSupervisor")
  bond_agreements bond_agreements[]  @relation("EmployeeBonds")
  created_bonds bond_agreements[]    @relation("BondCreatedBy")
  status_changes bond_status_history[] @relation("ChangedByEmployee")
  notifications notifications[]      @relation("NotificationRecipient")
  users         users?

  @@map("employees")
}

model training_providers {
  id            String    @id @default(uuid())
  name          String
  contact_email String?
  contact_phone String?
  address       String?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  // Relations
  bond_agreements bond_agreements[]

  @@map("training_providers")
}

model bond_agreements {
  id                   String      @id @default(uuid())
  employee_id          String
  training_provider_id String
  training_name        String
  training_description String?
  training_cost        Float
  training_start_date  DateTime
  training_end_date    DateTime
  bond_duration_months Int
  bond_start_date      DateTime
  bond_end_date        DateTime
  document_path        String?
  document_hash        String?
  status               BondStatus  @default(ACTIVE)
  created_by           String
  created_at           DateTime    @default(now())
  updated_at           DateTime    @updatedAt

  // Relations
  employee         employees           @relation("EmployeeBonds", fields: [employee_id], references: [id])
  training_provider training_providers @relation(fields: [training_provider_id], references: [id])
  creator          employees           @relation("BondCreatedBy", fields: [created_by], references: [id])
  status_history   bond_status_history[]
  notifications    notifications[]

  @@map("bond_agreements")
}

model bond_status_history {
  id            String      @id @default(uuid())
  bond_id       String
  old_status    BondStatus?
  new_status    BondStatus
  changed_by    String
  change_reason String?
  created_at    DateTime    @default(now())

  // Relations
  bond       bond_agreements @relation(fields: [bond_id], references: [id])
  changed_by_employee employees @relation("ChangedByEmployee", fields: [changed_by], references: [id])

  @@map("bond_status_history")
}

model notification_rules {
  id               String   @id @default(uuid())
  name             String
  description      String?
  days_before_event Int
  template_subject String
  template_body    String
  is_active        Boolean  @default(true)
  created_at       DateTime @default(now())

  // Relations
  notifications notifications[]

  @@map("notification_rules")
}

model notifications {
  id           String             @id @default(uuid())
  bond_id      String
  rule_id      String
  recipient_id String
  subject      String
  body         String
  sent_at      DateTime?
  status       NotificationStatus @default(PENDING)
  retry_count  Int                @default(0)

  // Relations
  bond       bond_agreements    @relation(fields: [bond_id], references: [id])
  rule       notification_rules @relation(fields: [rule_id], references: [id])
  recipient  employees          @relation("NotificationRecipient", fields: [recipient_id], references: [id])

  @@map("notifications")
}

model user_roles {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions Json
  created_at  DateTime @default(now())

  // Relations
  users users[]

  @@map("user_roles")
}

model users {
  id            String   @id @default(uuid())
  employee_id   String   @unique
  username      String   @unique
  password_hash String
  role_id       String
  is_active     Boolean  @default(true)
  last_login    DateTime?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  employee    employees @relation(fields: [employee_id], references: [id])
  role        user_roles @relation(fields: [role_id], references: [id])
  audit_logs  audit_logs[]

  @@map("users")
}

model audit_logs {
  id            String   @id @default(uuid())
  table_name    String
  record_id     String
  action        String
  old_values    Json?
  new_values    Json
  performed_by  String
  performed_at  DateTime @default(now())

  // Relations
  performer users @relation(fields: [performed_by], references: [id])

  @@map("audit_logs")
}